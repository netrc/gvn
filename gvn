#!/usr/bin/env python3

# TODO: logging
# TODO: -d to turn on debug log level
# TODO: -n don't write (create or bump)
# TODO: multiline string
# TODO: -f gvnfile
# TODO: -n newver
# TODO: bash? java? C

# DOC: only one vN.N.N in a file
# DOC: new gvn files have ISO date; you can delete

import re
import glob, sys
import datetime, time
import argparse

# gvn version file constants
GVN_VERSION_FILE="gvnVersion."
GVN_VERSION_GLOB=GVN_VERSION_FILE + "*"

# constants for languages supported
JS="js"
PY="py"

VERSION_REGEX='v([0-9]+)\.([0-9]+)\.([0-9]+)'
ISODATE_REGEX='[12][0-9][0-9][0-9]-[01][0-9]-[0123][0-9]T[0-2][0-9]:[0-5][0-9]:[0-5][0-9][+-][0-2][0-9]:[0-5][0-9]'

gvnTemplates = {
  JS: 'const var gvn_version_str = "v0.0.0";  const var gvn_date = "2019-01-04T08:40:01-05:00"\n',
  PY: 'GVN_VERSION_STR = "v0.0.0";  GVN_DATE = "2019-01-04T08:40:01-05:00"\n'
}

TEST_ISODATE=None   # this is overriden during testing  # need to declare global inside test class setup

# see https://stackoverflow.com/questions/2150739/iso-time-iso-8601-in-python

def isoDate():
  if TEST_ISODATE:
    return TEST_ISODATE

  utc_offset_sec = time.altzone if time.localtime().tm_isdst else time.timezone
  utc_offset = datetime.timedelta(seconds=-utc_offset_sec)
  id = datetime.datetime.now().replace(tzinfo=datetime.timezone(offset=utc_offset)).replace(microsecond=0).isoformat()
  #print("id: ", id)
  return id

## Bump version and date within a string
## Note: this is language independent, looing for vN.N.N and ISO Date strings
def bump(s):
    m = re.search( VERSION_REGEX, s)
    if not m:
      print("can't find!!!")
      raise Exception
    
    #print("maj: %s  min: %s  pat: %s" % ( m.group(1), m.group(2), m.group(3) ) )
    #print("span: %s", m.span() )
    (p0, p1) = m.span()
    #print("p0: %d p1: %d" % (p0,p1) )
    
    pat = int(m.group(3)) + 1
    sBumped = "%sv%s.%s.%d%s" % (s[0:p0], m.group(1), m.group(2), pat, s[p1:])
    #print(sBumped)

    m = re.search( ISODATE_REGEX, sBumped)
    if m:   # found date, so bump that too
      (p0, p1) = m.span()
      #print("date p0: %d p1: %d" % (p0,p1) )
      sBumped = "%s%s%s" % (sBumped[0:p0], isoDate(), sBumped[p1:])

    return sBumped

def createOrBump( lang ):
  print("create or bump ", lang)

  # if no gvn file, automatic create according to required lang
  # if gvn file, figureout lang, and bump
  files = glob.glob( GVN_VERSION_GLOB )
  if len(files) > 1:
    print("many files; don't know what to do")
    sys.exit(1)

  if len(files) == 1:   # must be the one to work on
    fname = files[0]

  if len(files) == 0:   # must be trying to init
    if not lang:
      print("no file, have to create, but no lang specified")
      sys.exit(1)

    fname = GVN_VERSION_FILE + lang
    print("no files; need to make", fname)
    # make the file
    with open(fname,"w") as g:
      g.write( gvnTemplates[lang] )     # n.b. this writes out an old date; will be updated below
      # check for success 
    # yes, this falls through to "bump" version and update date

  # now bump version and set date
  with open(fname,"r") as g:
    vStr = g.read()
    print("old vStr: ",vStr)
      
  vStrBumped = bump( vStr)
  print("new vStr: ", vStrBumped)
      
  with open(fname,"w") as g:
    g.write(vStrBumped)
  # check !  e.g length
  
##########################################################
import unittest

class TestGNV( unittest.TestCase ):
  def setUp(self):
    global TEST_ISODATE
    TEST_ISODATE = "2019-01-01T08:01:01-05:00"

  def test_isoDate(self):
    d = isoDate()
    self.assertEqual( len(d), 25 )
    m = re.search( ISODATE_REGEX, d)
    self.assertIsNotNone( m )

  def test_bump_strings(self):
    self.assertEqual ( bump('ver = "v0.0.0"; # comment') , 'ver = "v0.0.1"; # comment' )
    self.assertEqual ( bump('ver = "v0.0.9"; # comment') , 'ver = "v0.0.10"; # comment' )
    self.assertEqual ( bump('ver = "v0.0.9"; date = "2019-01-01T08:01:01-05:00"'), 'ver = "v0.0.10"; date = "2019-01-01T08:01:01-05:00"' )
##########################################################


if __name__ == "__main__":
  parser = argparse.ArgumentParser(prog="gvn", 
    description="automatic git version bumper",
    epilog='''    gvn -l py - will create gvnVersion.py with version 0.0.1
    gvn     - will bump gvnVersion patch level''' )
  parser.add_argument("-l", help="choose language py or js", action="store")
  parser.add_argument("-n", help="dont write", action="store_true")
  parser.add_argument("-d", help="debug on", action="store_true")
  parser.add_argument("-v", help="print my gvn version number", action="store_true")
  parser.add_argument("-t", help="run test suite", action="store_true")
  args = parser.parse_args()

  if args.t:
    del sys.argv[1:]   # so that unittest.main doesn't parse the args (and fail with usage)
    unittest.main()
    sys.exit(0)

  if args.v:
    import gvnVersion     # my own version number    
    print(gvnVersion.GVN_VERSION_STR, gvnVersion.GVN_DATE)
    sys.exit(0)
  
  # main code
  lang = None
  if args.l:     # will be needed only for first time creating file
    #print("lang: ", args.l)
    lang = args.l.lower()
    if not lang in gvnTemplates:
      print(lang, "? usage: -l (language) must be one of ", ", ".join(gvnTemplates) )
      sys.exit(1)

  createOrBump(lang)
